{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Stochastic Optimization \ud83d\udd17 Home Github repository Syllabus \ud83d\udd17 This class covers stochastic methods of optimization, primarily simulated annealing, evolutionary strategies, and genetic algorithms. The class is 10 hours total and uses HTML presentations and Jupyter notebooks in Python for exercises. The evaluation for this class is based on quiz responses during the first three classes and on a final project. Schedule 10/11 Introduction and simulated annealing Continuous optimization, random search, simulated annealing 16/11 Evolutionary Strategies Population-based methods, 1+1 ES, CMA-ES 23/11 Genetic Algorithms Genetic Algorithm, Multi-Objective Optimization, NSGA-II 01/12 Project Project Resources \ud83d\udd17 The 2nd year elective class EISC217: Evolutionary Computation goes into further detail on many of these same topics and introduces new topics such as genetic programming and quality diversity. The Introduction to Evolutionary Computing book by A. E. Eiben is recommended as reading for this class.","title":"Home"},{"location":"index.html#stochastic-optimization","text":"Home Github repository","title":"Stochastic Optimization"},{"location":"index.html#syllabus","text":"This class covers stochastic methods of optimization, primarily simulated annealing, evolutionary strategies, and genetic algorithms. The class is 10 hours total and uses HTML presentations and Jupyter notebooks in Python for exercises. The evaluation for this class is based on quiz responses during the first three classes and on a final project. Schedule 10/11 Introduction and simulated annealing Continuous optimization, random search, simulated annealing 16/11 Evolutionary Strategies Population-based methods, 1+1 ES, CMA-ES 23/11 Genetic Algorithms Genetic Algorithm, Multi-Objective Optimization, NSGA-II 01/12 Project Project","title":"Syllabus"},{"location":"index.html#resources","text":"The 2nd year elective class EISC217: Evolutionary Computation goes into further detail on many of these same topics and introduces new topics such as genetic programming and quality diversity. The Introduction to Evolutionary Computing book by A. E. Eiben is recommended as reading for this class.","title":"Resources"},{"location":"0_intro.html","text":"Introduction \ud83d\udd17 An introduction to stochastic optimization methods and applications, an overview of continuous optimization problems, and an outline of this class. Slides","title":"Introduction"},{"location":"0_intro.html#introduction","text":"An introduction to stochastic optimization methods and applications, an overview of continuous optimization problems, and an outline of this class. Slides","title":"Introduction"},{"location":"1_sa.html","text":"Random Search to Simulated Annealing \ud83d\udd17 Please download and follow the notebooks for this section of the class on random search and simulated annealing. Random search \ud83d\udd17 notebook Simulated annealing \ud83d\udd17 notebook Quiz on random search and simulated annealing \ud83d\udd17 quiz","title":"Simulated Annealing"},{"location":"1_sa.html#random-search-to-simulated-annealing","text":"Please download and follow the notebooks for this section of the class on random search and simulated annealing.","title":"Random Search to Simulated Annealing"},{"location":"1_sa.html#random-search","text":"notebook","title":"Random search"},{"location":"1_sa.html#simulated-annealing","text":"notebook","title":"Simulated annealing"},{"location":"1_sa.html#quiz-on-random-search-and-simulated-annealing","text":"quiz","title":"Quiz on random search and simulated annealing"},{"location":"2_es.html","text":"Evolutionary Strategies \ud83d\udd17 In this class, we continue building on examples of stochastic search for continuous optimization, covering simple evolutionary strategies and the Covariance Matrix Adaptation Evolutionary Strategy. The following installations may be necessary: pip install cma pyvirtualdisplay gym[box2d] apt-get install -y xvfb python-opengl Notebook Colab","title":"Evolutionary Strategies"},{"location":"2_es.html#evolutionary-strategies","text":"In this class, we continue building on examples of stochastic search for continuous optimization, covering simple evolutionary strategies and the Covariance Matrix Adaptation Evolutionary Strategy. The following installations may be necessary: pip install cma pyvirtualdisplay gym[box2d] apt-get install -y xvfb python-opengl Notebook Colab","title":"Evolutionary Strategies"},{"location":"3_ga.html","text":"Genetic Algorithms \ud83d\udd17 Genetic algorithms \ud83d\udd17 Notebook Multi-objective optimization \ud83d\udd17 Slides NSGA-II \ud83d\udd17 Notebook","title":"Genetic Algorithms"},{"location":"3_ga.html#genetic-algorithms","text":"","title":"Genetic Algorithms"},{"location":"3_ga.html#genetic-algorithms_1","text":"Notebook","title":"Genetic algorithms"},{"location":"3_ga.html#multi-objective-optimization","text":"Slides","title":"Multi-objective optimization"},{"location":"3_ga.html#nsga-ii","text":"Notebook","title":"NSGA-II"},{"location":"project.html","text":"Project: Train traffic in Flatland \ud83d\udd17 The Flatland environment is a 2D gridworld for developing Multi-Agent Reinforcement Learning. Through simulating train networks as agents, this platform allows the development of policies for the efficient management of dense traffic on complex railway networks. We use this platform in a project on neuroevolution. In this project, students compete in teams of their choice of 1-6 people. They evolve policies for each train in the environment, either using the same genes for each agent or different genes. Policy representation, stochastic algorithm, and agent modelling decisions such as inter-agent communication are all up to the students. Using a fixed budget of evaluations, students must submit their results and the corresponding code for final evaluation. This project will take place in class on 01/12. Students are required to install the Flatland package beforehand and ensure a python environment capable of running the baseline scripts. Students are encouraged to explore the Flatland environment before the 01/12. This project coincides with an open competition on AIcrowd platform with material prizes. Extra credit will be given to students who make submissions to the online competition in addition to the class competition. Installation \ud83d\udd17 The official installation instructions are here . Below are tested instructions for Linux and the Windows Subsystem for Linux if the official instructions do not work. This method was tested on Python 3.7 (WSL) and 3.9 (Linux). You first need a Python environment which you can install Flatland into. If you already have an environment, you can skip this step . If you want to make a new environment, this is one way: mkdir -p ~/.venvs python -m venv ~/.venvs/flatland source ~/.venvs/flatland/bin/activate pip install -U pip If it is a new environment, or if your environment doesn't have packages like numpy and pandas yet, you may need to install Python package building dependencies: pip install wheel cython From a new environment, you should also first install the dependencies from requirements_dev.txt : pip install -r requirements_dev.txt Once you have activated a Python environment, you can install the flatland package: git clone https://gitlab.aicrowd.com/flatland/flatland cd flatland pip install -e . To verify that the installation worked, you can run the package tests: pip install pytest py.test On Linux, you can also see a graphical demonstration by doing flatland-demo On Windows Subsystem for Linux, support for graphical display is still underway: github microsoft . As long as you can run the flatland package, you are ready for the project. In-class project \ud83d\udd17 During class, we will use evolution to find good agents for trains. Starting evolution scripts and environments are here . You should clone this repository and work in it, using a flatland environment: git clone https://github.com/SupaeroDataScience/flatland-project In this folder, there are multiple scripts ready to help with the project: evaluate.py : loads railway environments and evaluates a neural network agent by simulating an episode policy.py : an agent which controls a train by mapping observations to actions observation_utils.py : utility functions to handle observations, taken from the flatland starter kit evolution.py : an example evolution of an agent using a 1+lambda ES test.py : a script to run a saved individual on multiple different episodes random_agent.py : an example of an episode with random actions at every step which you can use to explore the environment To run an evolution on the small environment for 10 generations, use the following command: python evolution.py --env small --gens 10 --weights example.weights This will create two output files: evolution.log and example.weights . The final output of this script should be a fitness value (something like -100). Confirm that the individual was saved by using the following: python test.py --env small --weights example.weights This should output three fitness values similar to the final value of evolution. Note that evolution uses the same environment for each evaluation (same random seed) but the test is based on multiple random seeds. If you want to see the visual rendering of the environment, you can run (may not work on Windows): python test.py --env small --weight example.weights --render True Tasks and evaluation \ud83d\udd17 We will focus on the evolution of solutions for three fixed environments: small.pkl , medium.pkl , and large.pkl . You will have a budget of 1000 evaluations equivalent to the 1+lambda ES for 100 generations with a population size of 10. For the small environment, this should take around 10 minutes on an ordinary laptop. Your final evaluation will be on the large.pkl environment, however this takes much longer to run so you are advised to develop solutions on the small.pkl environment first. Your task is to improve the performance of evolution of a solution. You can explore whichever direction you think is most promising, including but not limited to: replacing the 1+lambda ES with a different algorithm changing evolutionary hyperparameters like population size and standard deviation modifying the agent observations modifying the policy network changing the fitness function Your final results on the large.pkl environment will be evaluated using three criteria: final result during evolution (fitness at the end of an episode) convergence speed (how quickly the evolution improves) robustness to different random environments (as in test.py ) Submission \ud83d\udd17 To submit your results, you should submit all necessary python files, model weights, and the log file of your evolution by the end of the Sunday December 12. An example submission is provided in example_submission , which you can copy for your own work: cp -r example_submission TEAM_NAME In this folder, you must modify the following files : team.txt , to include the names of all your team members method.txt , a short (less than 500 character) description of your method. To submit your solution, you can either upload this folder to the LMS or to the github repository. To submit through github, first fork the repository , then add your remote: git remote add myfork FORK_URL Add your results folder, commit, and push to your fork: git add TEAM_NAME git commit -m 'submission' git push myfork main Bonus: Flatland competition submission \ud83d\udd17 Bonus points will be awarded to students who compete in the Flatland competition. If you'd like to participate in the Flatland competition , follow the instructions in the Flatland starter kit . Full instructions are here . It is recommended that you complete a longer evolution than 1000 evaluations for the public competition, and that you include different environment types. Note that the provided environments for this project do not include malfunctions for simplicity and so models trained on the in-class environments may not work well in the final evaluation. To include malfunctions, you must create new environments. If you do compete in the Flatland competition, please send me the link of your position on the leaderboards. Good luck!","title":"Project"},{"location":"project.html#project-train-traffic-in-flatland","text":"The Flatland environment is a 2D gridworld for developing Multi-Agent Reinforcement Learning. Through simulating train networks as agents, this platform allows the development of policies for the efficient management of dense traffic on complex railway networks. We use this platform in a project on neuroevolution. In this project, students compete in teams of their choice of 1-6 people. They evolve policies for each train in the environment, either using the same genes for each agent or different genes. Policy representation, stochastic algorithm, and agent modelling decisions such as inter-agent communication are all up to the students. Using a fixed budget of evaluations, students must submit their results and the corresponding code for final evaluation. This project will take place in class on 01/12. Students are required to install the Flatland package beforehand and ensure a python environment capable of running the baseline scripts. Students are encouraged to explore the Flatland environment before the 01/12. This project coincides with an open competition on AIcrowd platform with material prizes. Extra credit will be given to students who make submissions to the online competition in addition to the class competition.","title":"Project: Train traffic in Flatland"},{"location":"project.html#installation","text":"The official installation instructions are here . Below are tested instructions for Linux and the Windows Subsystem for Linux if the official instructions do not work. This method was tested on Python 3.7 (WSL) and 3.9 (Linux). You first need a Python environment which you can install Flatland into. If you already have an environment, you can skip this step . If you want to make a new environment, this is one way: mkdir -p ~/.venvs python -m venv ~/.venvs/flatland source ~/.venvs/flatland/bin/activate pip install -U pip If it is a new environment, or if your environment doesn't have packages like numpy and pandas yet, you may need to install Python package building dependencies: pip install wheel cython From a new environment, you should also first install the dependencies from requirements_dev.txt : pip install -r requirements_dev.txt Once you have activated a Python environment, you can install the flatland package: git clone https://gitlab.aicrowd.com/flatland/flatland cd flatland pip install -e . To verify that the installation worked, you can run the package tests: pip install pytest py.test On Linux, you can also see a graphical demonstration by doing flatland-demo On Windows Subsystem for Linux, support for graphical display is still underway: github microsoft . As long as you can run the flatland package, you are ready for the project.","title":"Installation"},{"location":"project.html#in-class-project","text":"During class, we will use evolution to find good agents for trains. Starting evolution scripts and environments are here . You should clone this repository and work in it, using a flatland environment: git clone https://github.com/SupaeroDataScience/flatland-project In this folder, there are multiple scripts ready to help with the project: evaluate.py : loads railway environments and evaluates a neural network agent by simulating an episode policy.py : an agent which controls a train by mapping observations to actions observation_utils.py : utility functions to handle observations, taken from the flatland starter kit evolution.py : an example evolution of an agent using a 1+lambda ES test.py : a script to run a saved individual on multiple different episodes random_agent.py : an example of an episode with random actions at every step which you can use to explore the environment To run an evolution on the small environment for 10 generations, use the following command: python evolution.py --env small --gens 10 --weights example.weights This will create two output files: evolution.log and example.weights . The final output of this script should be a fitness value (something like -100). Confirm that the individual was saved by using the following: python test.py --env small --weights example.weights This should output three fitness values similar to the final value of evolution. Note that evolution uses the same environment for each evaluation (same random seed) but the test is based on multiple random seeds. If you want to see the visual rendering of the environment, you can run (may not work on Windows): python test.py --env small --weight example.weights --render True","title":"In-class project"},{"location":"project.html#tasks-and-evaluation","text":"We will focus on the evolution of solutions for three fixed environments: small.pkl , medium.pkl , and large.pkl . You will have a budget of 1000 evaluations equivalent to the 1+lambda ES for 100 generations with a population size of 10. For the small environment, this should take around 10 minutes on an ordinary laptop. Your final evaluation will be on the large.pkl environment, however this takes much longer to run so you are advised to develop solutions on the small.pkl environment first. Your task is to improve the performance of evolution of a solution. You can explore whichever direction you think is most promising, including but not limited to: replacing the 1+lambda ES with a different algorithm changing evolutionary hyperparameters like population size and standard deviation modifying the agent observations modifying the policy network changing the fitness function Your final results on the large.pkl environment will be evaluated using three criteria: final result during evolution (fitness at the end of an episode) convergence speed (how quickly the evolution improves) robustness to different random environments (as in test.py )","title":"Tasks and evaluation"},{"location":"project.html#submission","text":"To submit your results, you should submit all necessary python files, model weights, and the log file of your evolution by the end of the Sunday December 12. An example submission is provided in example_submission , which you can copy for your own work: cp -r example_submission TEAM_NAME In this folder, you must modify the following files : team.txt , to include the names of all your team members method.txt , a short (less than 500 character) description of your method. To submit your solution, you can either upload this folder to the LMS or to the github repository. To submit through github, first fork the repository , then add your remote: git remote add myfork FORK_URL Add your results folder, commit, and push to your fork: git add TEAM_NAME git commit -m 'submission' git push myfork main","title":"Submission"},{"location":"project.html#bonus-flatland-competition-submission","text":"Bonus points will be awarded to students who compete in the Flatland competition. If you'd like to participate in the Flatland competition , follow the instructions in the Flatland starter kit . Full instructions are here . It is recommended that you complete a longer evolution than 1000 evaluations for the public competition, and that you include different environment types. Note that the provided environments for this project do not include malfunctions for simplicity and so models trained on the in-class environments may not work well in the final evaluation. To include malfunctions, you must create new environments. If you do compete in the Flatland competition, please send me the link of your position on the leaderboards. Good luck!","title":"Bonus: Flatland competition submission"}]}