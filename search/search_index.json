{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Stochastic Optimization \ud83d\udd17 Home Github repository Syllabus \ud83d\udd17 This class covers stochastic methods of optimization, primarily simulated annealing, evolutionary strategies, and genetic algorithms. The class is 10 hours total and uses HTML presentations and Jupyter notebooks in Python for exercises. The evaluation for this class is based on quiz responses during the first three classes and on a final project. Schedule 10/11 Introduction and simulated annealing Continuous optimization, random search, simulated annealing 16/11 Evolutionary Strategies Population-based methods, 1+1 ES, CMA-ES 23/11 Genetic Algorithms Genetic Algorithm, Multi-Objective Optimization, NSGA-II 01/12 Project Project Resources \ud83d\udd17 The 2nd year elective class EISC217: Evolutionary Computation goes into further detail on many of these same topics and introduces new topics such as genetic programming and quality diversity. The Introduction to Evolutionary Computing book by A. E. Eiben is recommended as reading for this class.","title":"Home"},{"location":"index.html#stochastic-optimization","text":"Home Github repository","title":"Stochastic Optimization"},{"location":"index.html#syllabus","text":"This class covers stochastic methods of optimization, primarily simulated annealing, evolutionary strategies, and genetic algorithms. The class is 10 hours total and uses HTML presentations and Jupyter notebooks in Python for exercises. The evaluation for this class is based on quiz responses during the first three classes and on a final project. Schedule 10/11 Introduction and simulated annealing Continuous optimization, random search, simulated annealing 16/11 Evolutionary Strategies Population-based methods, 1+1 ES, CMA-ES 23/11 Genetic Algorithms Genetic Algorithm, Multi-Objective Optimization, NSGA-II 01/12 Project Project","title":"Syllabus"},{"location":"index.html#resources","text":"The 2nd year elective class EISC217: Evolutionary Computation goes into further detail on many of these same topics and introduces new topics such as genetic programming and quality diversity. The Introduction to Evolutionary Computing book by A. E. Eiben is recommended as reading for this class.","title":"Resources"},{"location":"0_intro.html","text":"Introduction \ud83d\udd17 An introduction to stochastic optimization methods and applications, an overview of continuous optimization problems, and an outline of this class. Slides","title":"Introduction"},{"location":"0_intro.html#introduction","text":"An introduction to stochastic optimization methods and applications, an overview of continuous optimization problems, and an outline of this class. Slides","title":"Introduction"},{"location":"1_sa.html","text":"Random Search to Simulated Annealing \ud83d\udd17 Please download and follow the notebooks for this section of the class on random search and simulated annealing. Random search \ud83d\udd17 notebook Simulated annealing \ud83d\udd17 notebook Quiz on random search and simulated annealing \ud83d\udd17 quiz","title":"Simulated Annealing"},{"location":"1_sa.html#random-search-to-simulated-annealing","text":"Please download and follow the notebooks for this section of the class on random search and simulated annealing.","title":"Random Search to Simulated Annealing"},{"location":"1_sa.html#random-search","text":"notebook","title":"Random search"},{"location":"1_sa.html#simulated-annealing","text":"notebook","title":"Simulated annealing"},{"location":"1_sa.html#quiz-on-random-search-and-simulated-annealing","text":"quiz","title":"Quiz on random search and simulated annealing"},{"location":"2_es.html","text":"Evolutionary Strategies \ud83d\udd17 In this class, we continue building on examples of stochastic search for continuous optimization, covering simple evolutionary strategies and the Covariance Matrix Adaptation Evolutionary Strategy. The following installations may be necessary: pip install cma pyvirtualdisplay gym[box2d] apt-get install -y xvfb python-opengl Notebook Colab","title":"Evolutionary Strategies"},{"location":"2_es.html#evolutionary-strategies","text":"In this class, we continue building on examples of stochastic search for continuous optimization, covering simple evolutionary strategies and the Covariance Matrix Adaptation Evolutionary Strategy. The following installations may be necessary: pip install cma pyvirtualdisplay gym[box2d] apt-get install -y xvfb python-opengl Notebook Colab","title":"Evolutionary Strategies"},{"location":"3_ga.html","text":"Genetic Algorithms \ud83d\udd17 Genetic algorithms \ud83d\udd17 Notebook Multi-objective optimization \ud83d\udd17 Slides NSGA-II \ud83d\udd17 Notebook","title":"Genetic Algorithms"},{"location":"3_ga.html#genetic-algorithms","text":"","title":"Genetic Algorithms"},{"location":"3_ga.html#genetic-algorithms_1","text":"Notebook","title":"Genetic algorithms"},{"location":"3_ga.html#multi-objective-optimization","text":"Slides","title":"Multi-objective optimization"},{"location":"3_ga.html#nsga-ii","text":"Notebook","title":"NSGA-II"},{"location":"project.html","text":"Project: Train traffic in Flatland \ud83d\udd17 The Flatland environment is a 2D gridworld for developing Multi-Agent Reinforcement Learning. Through simulating train networks as agents, this platform allows the development of policies for the efficient management of dense traffic on complex railway networks. We use this platform in a project on neuroevolution. In this project, students compete in teams of their choice of 1-6 people. They evolve policies for each train in the environment, either using the same genes for each agent or different genes. Policy representation, stochastic algorithm, and agent modelling decisions such as inter-agent communication are all up to the students. Using a fixed budget of evaluations, students must submit their results and the corresponding code for final evaluation. This project will take place in class on 01/12. Students are required to install the Flatland package beforehand and ensure a python environment capable of running the baseline scripts. Students are encouraged to explore the Flatland environment before the 01/12. This project coincides with an open competition on AIcrowd platform with material prizes. Extra credit will be given to students who make submissions to the online competition in addition to the class competition. Installation \ud83d\udd17 The official installation instructions are here . Below are tested instructions for Linux and the Windows Subsystem for Linux if the official instructions do not work. This method was tested on Python 3.7 (WSL) and 3.9 (Linux). You first need a Python environment which you can install Flatland into. If you already have an environment, you can skip this step . If you want to make a new environment, this is one way: mkdir -p ~/.venvs python -m venv ~/.venvs/flatland source ~/.venvs/flatland/bin/activate pip install -U pip If it is a new environment, or if your environment doesn't have packages like numpy and pandas yet, you may need to install Python package building dependencies: pip install wheel cython From a new environment, you should also first install the dependencies from requirements_dev.txt : pip install -r requirements_dev.txt Once you have activated a Python environment, you can install the flatland package: git clone git@gitlab.aicrowd.com:flatland/flatland.git cd flatland pip install -e . To verify that the installation worked, you can run the package tests: pip install pytest py.test On Linux, you can also see a graphical demonstration by doing flatland-demo On Windows Subsystem for Linux, support for graphical display is still underway: github microsoft . As long as you can run the flatland package, you are ready for the project.","title":"Project"},{"location":"project.html#project-train-traffic-in-flatland","text":"The Flatland environment is a 2D gridworld for developing Multi-Agent Reinforcement Learning. Through simulating train networks as agents, this platform allows the development of policies for the efficient management of dense traffic on complex railway networks. We use this platform in a project on neuroevolution. In this project, students compete in teams of their choice of 1-6 people. They evolve policies for each train in the environment, either using the same genes for each agent or different genes. Policy representation, stochastic algorithm, and agent modelling decisions such as inter-agent communication are all up to the students. Using a fixed budget of evaluations, students must submit their results and the corresponding code for final evaluation. This project will take place in class on 01/12. Students are required to install the Flatland package beforehand and ensure a python environment capable of running the baseline scripts. Students are encouraged to explore the Flatland environment before the 01/12. This project coincides with an open competition on AIcrowd platform with material prizes. Extra credit will be given to students who make submissions to the online competition in addition to the class competition.","title":"Project: Train traffic in Flatland"},{"location":"project.html#installation","text":"The official installation instructions are here . Below are tested instructions for Linux and the Windows Subsystem for Linux if the official instructions do not work. This method was tested on Python 3.7 (WSL) and 3.9 (Linux). You first need a Python environment which you can install Flatland into. If you already have an environment, you can skip this step . If you want to make a new environment, this is one way: mkdir -p ~/.venvs python -m venv ~/.venvs/flatland source ~/.venvs/flatland/bin/activate pip install -U pip If it is a new environment, or if your environment doesn't have packages like numpy and pandas yet, you may need to install Python package building dependencies: pip install wheel cython From a new environment, you should also first install the dependencies from requirements_dev.txt : pip install -r requirements_dev.txt Once you have activated a Python environment, you can install the flatland package: git clone git@gitlab.aicrowd.com:flatland/flatland.git cd flatland pip install -e . To verify that the installation worked, you can run the package tests: pip install pytest py.test On Linux, you can also see a graphical demonstration by doing flatland-demo On Windows Subsystem for Linux, support for graphical display is still underway: github microsoft . As long as you can run the flatland package, you are ready for the project.","title":"Installation"}]}